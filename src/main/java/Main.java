/**Personal Data Access Control System
 * MainClass
 *
 * Author: Cristòfol Daudén Esmel
 */

import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.DefaultGasProvider;
import src.main.java.contracts.CollectionConsent;
import src.main.java.contracts.ProcessingConsent;

import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;


public class Main {

    private static Web3j web3j;
    private static ClientTransactionManager transactionManager = null;
    private static DefaultGasProvider gasProvider;
    private static CollectionConsentManager collectionConsentManager;
    private static ProcessingConsentManager purposeManager;
    private static ActorsManager actors;

    public static void main(String args[])  throws Exception {

        //create a Web3j instance to our local Ethereum node (Ganache)
        web3j = Web3j.build( new HttpService("http://localhost:8545") );
        gasProvider = new DefaultGasProvider();
        collectionConsentManager = CollectionConsentManager.getConsentManager(web3j, gasProvider);
        purposeManager = ProcessingConsentManager.getPurposeManager(web3j, gasProvider);

        //For asynchronous calls
        /*CompletableFuture<Web3ClientVersion> future = web3j.web3ClientVersion().sendAsync();
        Web3ClientVersion web3ClientVersion = future.get();
        String clientVersion = web3ClientVersion.getWeb3ClientVersion();
        System.out.println(clientVersion);*/

        //Getting the accounts generated by Ganache and Setting up controller and data subject actors
        actors = new ActorsManager( web3j.ethAccounts().send().getAccounts().toArray(new String[0]), web3j );

        menu();

        web3j.shutdown();
    }

    public static void menu(){
        Scanner sn = new Scanner(System.in);
        boolean end = false; int option;
        while (!end) {
            System.out.println("Select an actor:");
            System.out.println("1. Controller");
            System.out.println("2. Data Subject");
            System.out.println("3. Processor");
            System.out.println("4. Exit");
            try {
                option = sn.nextInt();
                switch (option) {
                    case 1:
                        transactionManager = actors.transactionManagerController;
                        collectionConsentManager.operateOverCollectionConsent(transactionManager, actors);
                        break;
                    case 2:
                        transactionManager = actors.transactionManagerDataSubject;
                        collectionConsentManager.operateOverCollectionConsentDS(transactionManager, actors);
                        break;
                    case 3:
                        System.out.println("Select Processor: 0 - " +  (actors.transactionManagerProcessors.length - 1) );
                        transactionManager = actors.transactionManagerProcessors[ sn.nextInt() ];
                        collectionConsentManager.operateOverCollectionConsent(transactionManager, actors);
                        break;
                    case 4:
                        end = true;
                        break;
                    default:
                        System.out.println("Not a valid option");
                }
            } catch (InputMismatchException e) {
                System.out.println("Insert a valid option");
                sn.next();
            } catch (Exception e) {
                e.printStackTrace();
                sn.next();
            }
        }
    }


}
