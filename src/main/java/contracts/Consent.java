package src.main.java.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Consent extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040516200363b3803806200363b833981810160405260808110156200003757600080fd5b8101908080519060200190929190805160405193929190846401000000008211156200006257600080fd5b838201915060208201858111156200007957600080fd5b82518660208202830111640100000000821117156200009757600080fd5b8083526020830192505050908051906020019060200280838360005b83811015620000d0578082015181840152602081019050620000b3565b5050505090500160405260200180519060200190929190805160405193929190846401000000008211156200010457600080fd5b838201915060208201858111156200011b57600080fd5b82518660208202830111640100000000821117156200013957600080fd5b8083526020830192505050908051906020019060200280838360005b838110156200017257808201518184015260208101905062000155565b5050505090500160405250505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826002908051906020019062000218929190620002c7565b5042600681905550816006540160078190555080600990805190602001906200024392919062000356565b506000600860006101000a81548160ff021916908360ff1602179055506000600860016101000a81548160ff021916908360ff16021790555030600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000416565b82805482825590600052602060002090810192821562000343579160200282015b82811115620003425782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002e8565b5b509050620003529190620003a8565b5090565b82805482825590600052602060002090810192821562000395579160200282015b828111156200039457825182559160200191906001019062000377565b5b509050620003a49190620003ee565b5090565b620003eb91905b80821115620003e757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101620003af565b5090565b90565b6200041391905b808211156200040f576000816000905550600101620003f5565b5090565b90565b61321580620004266000396000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063af3368f21162000099578063d17ff232116200006f578063d17ff232146200045a578063d6fc3151146200048b578063fc735e9914620004d2578063ff4c4d5414620004f657620000e2565b8063af3368f21462000348578063b8a9949214620003ab578063bc16e34314620003f757620000e2565b806308b78cda14620000e75780633e8b706114620000f35780634fca47af146200018e5780636fac0fe9146200020d578063839c698f146200021957806386a1d6e414620002aa575b600080fd5b620000f162000502565b005b6200014c600480360360608110156200010b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050620005c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200020b60048036036020811015620001a657600080fd5b8101908080359060200190640100000000811115620001c457600080fd5b820183602082011115620001d757600080fd5b80359060200191846001830284011164010000000083111715620001fa57600080fd5b909192939192939050505062000f27565b005b6200021762000f2b565b005b62000268600480360360408110156200023157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062000ff0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620002ef60048036036020811015620002c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001115565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156200033457808201518184015260208101905062000317565b505050509050019250505060405180910390f35b62000352620011b1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015620003975780820151818401526020810190506200037a565b505050509050019250505060405180910390f35b620003b562001241565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620004016200126b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156200044657808201518184015260208101905062000429565b505050509050019250505060405180910390f35b62000489600480360360208110156200047257600080fd5b8101908080359060200190929190505050620012c5565b005b620004d060048036036020811015620004a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200177b565b005b620004dc62001ac2565b604051808215151515815260200191505060405180910390f35b6200050062001b08565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620005a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620030c36033913960400191505060405180910390fd5b6001600860016101000a81548160ff021916908360ff160217905550565b6000804290506001600860009054906101000a900460ff1660ff16148015620005f257506006548110155b80156200060157506007548111155b62000674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436f6e73656e7420636f6e737472616374206973206e6f742076616c69642e0081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200071c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806200308d6036913960400191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620007db600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015620007cf57602002820191906000526020600020905b815481526020019060010190808311620007ba575b50505050508662001bcd565b1462000833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180620031a3603e913960400191505060405180910390fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620008b46009805480602002602001604051908101604052809291908181526020018280548015620008a857602002820191906000526020600020905b81548152602001906001019080831162000893575b50505050508762001bcd565b1315620009ea57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168787876001604051620009139062001cdd565b808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019650505050505050604051809103906000f080158015620009e1573d6000803e3d6000fd5b50905062000b14565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878787600060405162000a429062001cdd565b808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019650505050505050604051809103906000f08015801562000b10573d6000803e3d6000fd5b5090505b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1662000c06576060604051806040016040528060011515815260200182815250600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101908051906020019062000c0092919062001ceb565b50905050505b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010185908060018154018082558091505090600182039060005260206000200160009091929091909150555080600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff62000db9600480548060200260200160405190810160405280929190818152602001828054801562000dad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000d62575b50505050508862001c3f565b141562000e275760048690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff62000ea6600580548060200260200160405190810160405280929190818152602001828054801562000e9a57602002820191906000526020600020905b81548152602001906001019080831162000e85575b50505050508762001bcd565b141562000eda5760058590806001815401808255809150509060018203906000526020600020016000909192909190915055505b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080925050509392505050565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620030c36033913960400191505060405180910390fd5b6001600860006101000a81548160ff021916908360ff160217905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1662001099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062003174602f913960400191505060405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015620011a557602002820191906000526020600020905b81548152602001906001019080831162001190575b50505050509050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156200123757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620011ec575b5050505050905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805480602002602001604051908101604052809291908181526020018280548015620012bb57602002820191906000526020600020905b815481526020019060010190808311620012a6575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200136c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620030c36033913960400191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620013eb6005805480602002602001604051908101604052809291908181526020018280548015620013df57602002820191906000526020600020905b815481526020019060010190808311620013ca575b50505050508362001bcd565b1362001443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f81526020018062003135603f913960400191505060405180910390fd5b60008090505b60048054905081101562001671577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6200154e60036000600485815481106200148e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054806020026020016040519081016040528092919081815260200182805480156200154257602002820191906000526020600020905b8154815260200190600101908083116200152d575b50505050508462001bcd565b1315620016635760036000600483815481106200156757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff4c4d546040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200164957600080fd5b505af11580156200165e573d6000803e3d6000fd5b505050505b808060010191505062001449565b506000620016d26009805480602002602001604051908101604052809291908181526020018280548015620016c657602002820191906000526020600020905b815481526020019060010190808311620016b1575b50505050508362001bcd565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81131562001777576009600160098054905003815481106200171357fe5b9060005260206000200154600982815481106200172c57fe5b90600052602060002001819055506009600160098054905003815481106200175057fe5b9060005260206000200160009055600980548091906001900362001775919062001d3d565b505b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001822576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620030c36033913960400191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620018d76004805480602002602001604051908101604052809291908181526020018280548015620018cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001880575b50505050508362001c3f565b136200192f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180620030f6603f913960400191505060405180910390fd5b60008090505b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054905081101562001abe57600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101838154811062001a1557fe5b9060005260206000200154815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff4c4d546040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001a9757600080fd5b505af115801562001aac573d6000803e3d6000fd5b50505050808060010191505062001935565b5050565b60008042905060006001600860009054906101000a900460ff1660ff1614801562001aef57506006548210155b801562001afe57506007548211155b9050809250505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620030c36033913960400191505060405180910390fd5b6000600860006101000a81548160ff021916908360ff160217905550565b600080600090505b835181101562001c14578284828151811062001bed57fe5b6020026020010151141562001c06578091505062001c39565b808060010191505062001bd5565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b600080600090505b835181101562001cb2578273ffffffffffffffffffffffffffffffffffffffff1684828151811062001c7557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141562001ca4578091505062001cd7565b808060010191505062001c47565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6112f88062001d9583390190565b82805482825590600052602060002090810192821562001d2a579160200282015b8281111562001d2957825182559160200191906001019062001d0c565b5b50905062001d39919062001d6c565b5090565b81548183558181111562001d675781836000526020600020918201910162001d66919062001d6c565b5b505050565b62001d9191905b8082111562001d8d57600081600090555060010162001d73565b5090565b9056fe60806040523480156200001157600080fd5b50604051620012f8380380620012f8833981810160405260c08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260048111156200014957fe5b600660006101000a81548160ff021916908360048111156200016757fe5b02179055504260038190555081600354016004819055506001811415620001c8576040518060600160405280600160ff168152602001600160ff168152602001600060ff168152506005906003620001c19291906200020f565b5062000203565b6040518060600160405280600160ff168152602001600060ff168152602001600060ff168152506005906003620002019291906200020f565b505b505050505050620002e3565b826003601f016020900481019282156200029d5791602002820160005b838211156200026c57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200022c565b80156200029b5782816101000a81549060ff02191690556001016020816000010492830192600103026200026c565b505b509050620002ac9190620002b0565b5090565b620002e091905b80821115620002dc57600081816101000a81549060ff021916905550600101620002b7565b5090565b90565b61100580620002f36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063845606251161008c578063e854066511610066578063e854066514610296578063ed831c70146102a0578063fc735e99146102aa578063ff4c4d54146102cc576100ea565b806384560625146102645780639b3ee54714610282578063e62eba451461028c576100ea565b80633018205f116100c85780633018205f1461014d5780634265c707146101975780634fca47af146101e15780636fac0fe91461025a576100ea565b80630205ad2f146100ef5780630561bac3146100f9578063214d4f7414610143575b600080fd5b6100f76102d6565b005b6101016103ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61014b6103d7565b005b6101556104ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019f6104d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610258600480360360208110156101f757600080fd5b810190808035906020019064010000000081111561021457600080fd5b82018360208201111561022657600080fd5b8035906020019184600183028401116401000000008311171561024857600080fd5b9091929391929390505050610502565b005b610262610506565b005b61026c6107fb565b6040518082815260200191505060405180910390f35b61028a61081d565b005b6102946108f5565b005b61029e6109cc565b005b6102a8610aa4565b005b6102b2610b7c565b604051808215151515815260200191505060405180910390f35b6102d4610c1e565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461037c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180610f446036913960400191505060405180910390fd5b6000600560006003811061038c57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461047c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180610f7a6033913960400191505060405180910390fd5b6000600560016003811061048c57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614806105ae57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b806106065750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b61065b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610fad6024913960400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156106e657600160056000600381106106c157fe5b602091828204019190066101000a81548160ff021916908360ff1602179055506107f9565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610770576001600560016003811061074b57fe5b602091828204019190066101000a81548160ff021916908360ff1602179055506107f8565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156107f757600160056002600381106107d657fe5b602091828204019190066101000a81548160ff021916908360ff1602179055505b5b5b565b6000600660009054906101000a900460ff16600481111561081857fe5b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146108c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610f146030913960400191505060405180910390fd5b600060056002600381106108d357fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461099a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180610f7a6033913960400191505060405180910390fd5b600160056001600381106109aa57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180610f446036913960400191505060405180910390fd5b60016005600060038110610a8257fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610f146030913960400191505060405180910390fd5b60016005600260038110610b5a57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550565b6000804290506000806005600260038110610b9357fe5b602091828204019190069054906101000a900460ff166005600160038110610bb757fe5b602091828204019190069054906101000a900460ff166005600060038110610bdb57fe5b602091828204019190069054906101000a900460ff16161660ff1614158015610c0657506003548210155b8015610c1457506004548211155b9050809250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161480610cc657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b80610d1e5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610fad6024913960400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610dfe5760006005600060038110610dd957fe5b602091828204019190066101000a81548160ff021916908360ff160217905550610f11565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610e885760006005600160038110610e6357fe5b602091828204019190066101000a81548160ff021916908360ff160217905550610f10565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610f0f5760006005600260038110610eee57fe5b602091828204019190066101000a81548160ff021916908360ff1602179055505b5b5b56fe4f6e6c79207468652070726f636573736f7220697320616c6c6f77656420746f20646f207468697320616374696f6e2e4f6e6c7920746865206461746120436f6e74726f6c6c657220697320616c6c6f77656420746f20646f207468697320616374696f6e2e4f6e6c79207468652064617461205375626a65637420697320616c6c6f77656420746f20646f207468697320616374696f6e2e4163746f72206e6f7420616c6c6f77656420746f20646f207468697320616374696f6e2ea265627a7a723158202fbe79a3214d81b1f848185a710f4567c356f9f4fcff429faef2c9f710a5cdda64736f6c634300051000324f6e6c7920746865206461746120436f6e74726f6c6c657220697320616c6c6f77656420746f20646f207468697320616374696f6e2e4f6e6c79207468652064617461205375626a65637420697320616c6c6f77656420746f20646f207468697320616374696f6e2e50726f636573736f72206973206e6f742070726f63657373696e67204453277320706572736f6e616c206461746120666f7220616e7920707572706f73652e4e6f2070726f636573736f722069732070726f63657373696e67204453277320706572736f6e616c206461746120666f72207468697320707572706f73652e50726f636573736f7220686173206e6f742072657175657374656420746f2070726f6365737320445327732050442e50726f636573736f722068617320616c7265616479206120636f6e7472616374207769746820746869732070726f63657373696e6720707572706f73652ea265627a7a723158201a66752a68a064a3712fe652bcf8be9846e1fb85121686868cf7f189f92ce65064736f6c63430005100032";

    public static final String FUNC_NEWPURPOSE = "newPurpose";

    public static final String FUNC_MODIFYDATA = "modifyData";

    public static final String FUNC_ERASEDATA = "eraseData";

    public static final String FUNC_GRANTCONSENT = "grantConsent";

    public static final String FUNC_REVOKECONSENT = "revokeConsent";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_GETPURPOSESC = "getPurposeSC";

    public static final String FUNC_GETALLPROCESSORS = "getAllProcessors";

    public static final String FUNC_GETALLPURPOSES = "getAllPurposes";

    public static final String FUNC_GETALLPURPOSESPROCESSOR = "getAllPurposesProcessor";

    public static final String FUNC_GETLASTPURPOSE = "getLastPurpose";

    public static final String FUNC_REVOKECONSENTPURPOSE = "revokeConsentPurpose";

    public static final String FUNC_REVOKECONSENTPROCESSOR = "revokeConsentProcessor";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Consent(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Consent(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Consent(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Consent(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> newPurpose(String processor, BigInteger processingPurpose, BigInteger duration) {
        final Function function = new Function(
                FUNC_NEWPURPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(processor), 
                new org.web3j.abi.datatypes.generated.Uint256(processingPurpose), 
                new org.web3j.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyData(String _data) {
        final Function function = new Function(
                FUNC_MODIFYDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> eraseData() {
        final Function function = new Function(
                FUNC_ERASEDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> grantConsent() {
        final Function function = new Function(
                FUNC_GRANTCONSENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsent() {
        final Function function = new Function(
                FUNC_REVOKECONSENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> verify() {
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getPurposeSC(String processor, BigInteger purpose) {
        final Function function = new Function(FUNC_GETPURPOSESC, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(processor), 
                new org.web3j.abi.datatypes.generated.Uint256(purpose)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getAllProcessors() {
        final Function function = new Function(FUNC_GETALLPROCESSORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllPurposes() {
        final Function function = new Function(FUNC_GETALLPURPOSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllPurposesProcessor(String processor) {
        final Function function = new Function(FUNC_GETALLPURPOSESPROCESSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(processor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getLastPurpose() {
        final Function function = new Function(FUNC_GETLASTPURPOSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsentPurpose(BigInteger purpose) {
        final Function function = new Function(
                FUNC_REVOKECONSENTPURPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(purpose)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsentProcessor(String processor) {
        final Function function = new Function(
                FUNC_REVOKECONSENTPROCESSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(processor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Consent load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Consent(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Consent load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Consent(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Consent load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Consent(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Consent load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Consent(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Consent> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _dataSubject, List<String> _recipients, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataSubject), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(Consent.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Consent> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _dataSubject, List<String> _recipients, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataSubject), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(Consent.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Consent> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _dataSubject, List<String> _recipients, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataSubject), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(Consent.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Consent> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _dataSubject, List<String> _recipients, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataSubject), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(Consent.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
