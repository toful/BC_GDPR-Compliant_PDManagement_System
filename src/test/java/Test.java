/**Personal Data Access Control System
 *MainClass
 *
 * Author: Cristòfol Daudén Esmel
 */

import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.DefaultGasProvider;
import src.main.java.contracts.CollectionConsent;
import src.main.java.contracts.ProcessingConsent;

import java.io.File;
import java.io.FileWriter;
import java.math.BigInteger;
import java.util.*;


public class Test {

    private static Web3j web3j;
    private static ClientTransactionManager transactionManager = null;
    private static DefaultGasProvider gasProvider;
    private static CollectionConsentManagerTest collectionConsentManagerTest;
    private static ProcessingConsentManagerTest processingConsentManagerTest;
    private static ActorsManager actors;
    private static FileWriter csvWriter, csvWriter2;

    public static void main(String args[])  throws Exception {

        File f = new File("./results");
        // check if directory exists
        if (!f.isDirectory()) {
            try{
                if(f.mkdir()) {
                    System.out.println("Results Directory Created");
                } else {
                    System.out.println("Directory is not created");
                }
            } catch(Exception e){
                e.printStackTrace();
            }
        }

        csvWriter = new FileWriter("results/results.csv", true);
        csvWriter.append( "SCsVersion,Method,Iterations,TotalGasUsed,AverageGasUsed\n");

        csvWriter2 = new FileWriter("results/results2.csv", true);

        //create a Web3j instance to our local Ethereum node (Ganache)
        web3j = Web3j.build( new HttpService("http://localhost:8545") );
        gasProvider = new DefaultGasProvider();
        collectionConsentManagerTest = CollectionConsentManagerTest.getConsentManager(web3j, gasProvider);
        processingConsentManagerTest = ProcessingConsentManagerTest.getPurposeManager(web3j, gasProvider);

        //Getting the accounts generated by Ganache and Setting up controller and data subject actors
        actors = new ActorsManager( web3j.ethAccounts().send().getAccounts().toArray(new String[0]), web3j );

        evaluateCollectionConsentContract( 10 );

        evaluatePurposeContract( 10 );

        evaluateRevokeConsentPurpose();

        evaluateRevokeConsentProcessor();

        csvWriter.flush();
        csvWriter.close();
        csvWriter2.flush();
        csvWriter2.close();
        web3j.shutdown();
    }

    public static void evaluateCollectionConsentContract(int numIterations) throws Exception{
        CollectionConsent consent;
        List<CollectionConsent> consentDSlist = new ArrayList<>();
        List<CollectionConsent> consentDClist = new ArrayList<>();
        BigInteger newData = new BigInteger( "0094967295");


        //New consent
        System.out.println( "Creating new Collection Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( int i = 0; i < numIterations; i++ ){
            consent = collectionConsentManagerTest.newCollectionConsentContract( actors.transactionManagerDataSubject, actors.controller, actors.dataRecipients );
            consentDSlist.add( consent );
            consentDClist.add( CollectionConsent.load( consent.getContractAddress(),
                    web3j, actors.transactionManagerController,gasProvider ) );
        }
        csvWriter.append( "1SCProcessor,NewCollectionConsentSC," + numIterations + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/numIterations + "\n" );

        //Grant Consent
        System.out.println( "Granting consent on SCs");
        collectionConsentManagerTest.gasUsed = 0;
        for( CollectionConsent consentDC: consentDClist ){
            collectionConsentManagerTest.grantConsent( consentDC );
        }
        csvWriter.append( "1SCProcessor,DC_GrantConsent_CollectionConsentSC," + numIterations + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/numIterations + "\n" );

        //Modify Data
        System.out.println( "Modifying Data on SCs");
        collectionConsentManagerTest.gasUsed = 0;
        for( CollectionConsent consentDS: consentDSlist ){
            collectionConsentManagerTest.modifyData( consentDS, newData );
        }
        csvWriter.append( "1SCProcessor,DS_ModifyData_CollectionConsentSC," + numIterations + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/numIterations + "\n" );

        //Request to erase Data
        System.out.println( "Request to erase Data on SCs");
        collectionConsentManagerTest.gasUsed = 0;
        for( CollectionConsent consentDS: consentDSlist ){
            collectionConsentManagerTest.eraseData( consentDS );
        }
        csvWriter.append( "1SCProcessor,DS_EraseData_CollectionConsentSC," + numIterations + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/numIterations + "\n" );

        //Revoke Consent
        System.out.println( "Revoking consent on SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( CollectionConsent consentDS: consentDSlist ){
            collectionConsentManagerTest.revokeConsent( consentDS );
        }
        csvWriter.append( "1SCProcessor,DS_RevokeConsent_CollectionConsentSC," + numIterations + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/numIterations + "\n" );
    }


    public static void evaluatePurposeContract(int numIterations) throws Exception{
        CollectionConsent consent;
        List<CollectionConsent> consentDClist = new ArrayList<>();
        List<CollectionConsent> consentDSlist = new ArrayList<>();
        List<ProcessingConsent> purposeDSlist = new ArrayList<>();
        List<ProcessingConsent> purposeDClist = new ArrayList<>();
        List<ProcessingConsent> purposeDPlist = new ArrayList<>();
        BigInteger processingPurpose = new BigInteger( "0" );
        BigInteger newData = new BigInteger( "0094967295");
        String aux;
        int gasAux;

        //New Collection Consent
        System.out.println("EVALUATING PURPOSE SMART CONTRACT");
        System.out.println( "Creating new Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( int i = 0; i < numIterations; i++ ){
            consent = collectionConsentManagerTest.newCollectionConsentContract( actors.transactionManagerDataSubject, actors.controller, actors.dataRecipients );
            consentDClist.add( CollectionConsent.load( consent.getContractAddress(),
                    web3j, actors.transactionManagerController,gasProvider ) );
            consentDSlist.add( consent );
        }

        //Grant Consent
        System.out.println( "Granting consent on SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( CollectionConsent consentDC: consentDClist ){
            collectionConsentManagerTest.grantConsent( consentDC );
        }

        //New Processing Consent
        System.out.println( "New Purpose for each processor. Num Processors: " + actors.processors.length );
        collectionConsentManagerTest.gasUsed = 0;
        gasAux = 0;
        csvWriter2.append( "NewProcessingConsent" );
        for( int i=0; i < actors.processors.length; i++ ){
            for( CollectionConsent consentC : consentDClist ){
                aux = processingConsentManagerTest.newPurposeR( consentC, actors.processors[i], processingPurpose );
                purposeDClist.add( ProcessingConsent.load( aux,
                        web3j, actors.transactionManagerController, gasProvider ) );
                purposeDSlist.add( ProcessingConsent.load( aux,
                        web3j, actors.transactionManagerDataSubject, gasProvider ) );
                purposeDPlist.add( ProcessingConsent.load( aux,
                        web3j, actors.transactionManagerProcessors[i], gasProvider ) );
                csvWriter2.append( "," + ( collectionConsentManagerTest.gasUsed - gasAux ) );
                gasAux = collectionConsentManagerTest.gasUsed;
            }
        }
        csvWriter.append( "1SCProcessor,NewProcessingConsentProcessor," + actors.processors.length * consentDClist.size() + "," +
                collectionConsentManagerTest.gasUsed + "," + collectionConsentManagerTest.gasUsed/(actors.processors.length * consentDClist.size()) + "\n" );
        csvWriter2.append("\n");

        //Add more Purposes
        List<BigInteger> purposes = new ArrayList<BigInteger>();
        purposes.add(new BigInteger("1"));
        purposes.add(new BigInteger("2"));
        purposes.add(new BigInteger("3"));
        System.out.println( "Add " + purposes.size() + " more Purposes for each processor. Num Processors: " + actors.processors.length );
        collectionConsentManagerTest.gasUsed = 0;
        gasAux = 0;

        for ( BigInteger purpose : purposes ){
            csvWriter2.append( "Add Purpose: " + CollectionConsentManagerTest.PURPOSE.values()[ purpose.intValue() ] );
            for (CollectionConsent consentC : consentDClist) {
                for ( String processor : actors.processors ) {
                    processingConsentManagerTest.newPurposeR( consentC, processor, purpose );
                    csvWriter2.append( "," + (collectionConsentManagerTest.gasUsed - gasAux) );
                    gasAux = collectionConsentManagerTest.gasUsed;
                }
            }
            csvWriter2.append("\n");
        }
        csvWriter.append( "1SCProcessor,AddMorePurposesProcessor," +
                actors.processors.length * consentDClist.size() * purposes.size() + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/(actors.processors.length * consentDClist.size() * purposes.size()) + "\n" );

        purposes.add(new BigInteger("0"));


        /////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////

        //DS Grants Consent on Processing Consent SC for all purposes
        System.out.println( "DS Grants consent on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDS : purposeDSlist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.grantConsent( purposeDS, purpose );
            }
        }
        csvWriter.append( "1SCProcessor,DS_GrantConsent_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDSlist.size() * purposes.size() ) + "\n" );

        //DP Grants Consent on Processing Consent SC for all purposes
        System.out.println( "Processor Grants consent on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeP : purposeDPlist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.grantConsent( purposeP, purpose );
            }
        }
        csvWriter.append( "1SCProcessor,DP_GrantConsent_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDPlist.size() * purposes.size() ) + "\n" );

        /////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////

        //ModifyData on Processing Consent SC for all Purposes
        System.out.println( "DS Modifies processing data on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDS : purposeDSlist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.modifyData( purposeDS, purpose, newData );
            }
        }
        csvWriter.append( "1SCProcessor,DS_ModifyData_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDSlist.size() * purposes.size() ) + "\n" );


        /////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////

        //DS Revokes Consent on Processing Consent SC for all purposes
        System.out.println( "DS Revokes consent on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDS : purposeDSlist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.revokeConsent( purposeDS, purpose );
            }
        }
        csvWriter.append( "1SCProcessor,DS_RevokeConsent_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDSlist.size() * purposes.size() ) + "\n" );

        //Controller Revokes Consent on Processing Consent SC for all purposes
        System.out.println( "Controller Revokes consent on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDC : purposeDClist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.revokeConsent( purposeDC, purpose );
            }
        }
        csvWriter.append( "1SCProcessor,DC_RevokeConsent_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDClist.size() * purposes.size() ) + "\n" );

        //Processor Revokes Consent on Processing Consent SC for all purposes
        System.out.println( "Processor Revokes consent on all Processing Consent SC");
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDP : purposeDPlist ) {
            for( BigInteger purpose : purposes ){
                processingConsentManagerTest.revokeConsent( purposeDP, purpose );
            }
        }
        csvWriter.append( "1SCProcessor,DP_RevokeConsent_ProcessingConsentSC," +
                ( purposeDSlist.size() * purposes.size() ) + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposeDPlist.size() * purposes.size() ) + "\n" );
    }


    public static void evaluateRevokeConsentPurpose() throws Exception{
        //Test Revoke Consent Purpose
        String purpose;
        ArrayList<ProcessingConsent> purposesListDS = new ArrayList<>();
        ArrayList<ProcessingConsent> purposesListDP = new ArrayList<>();
        BigInteger revokingPurpose = new BigInteger("0");
        List<BigInteger> processingPurposes = new ArrayList<BigInteger>();
        processingPurposes.add(new BigInteger("1"));
        processingPurposes.add(new BigInteger("2"));
        processingPurposes.add(new BigInteger("3"));

        System.out.println("\nEVALUATING Revoke Purpose");

        //New consent
        System.out.println( "Creating new Consent SC");
        CollectionConsent consentDS = collectionConsentManagerTest.newCollectionConsentContract( actors.transactionManagerDataSubject, actors.controller, actors.dataRecipients );

        //DC grants consent
        System.out.println( "Granting consent on SC");
        CollectionConsent consentDC = CollectionConsent.load( consentDS.getContractAddress(), web3j, actors.transactionManagerController, gasProvider);
        collectionConsentManagerTest.grantConsent( consentDC );

        //New Processing Consent and processing purposes for each Processor and DS grant consent
        System.out.println( "New Purpose for each processor. Num Processors: " + actors.processors.length +
                "+ Adding " + processingPurposes.size() + " more Purposes for each processor." );
        for( int i=0; i < actors.processors.length; i++ ){
            purpose = processingConsentManagerTest.newPurposeR( consentDC, actors.processors[i], revokingPurpose );
            purposesListDS.add( ProcessingConsent.load( purpose, web3j, actors.transactionManagerDataSubject, gasProvider) );
            purposesListDP.add( ProcessingConsent.load( purpose, web3j, actors.transactionManagerProcessors[i], gasProvider) );
            processingConsentManagerTest.grantConsent( purposesListDS.get( purposesListDS.size()-1 ), revokingPurpose );
            processingConsentManagerTest.grantConsent( purposesListDP.get( purposesListDP.size()-1 ), revokingPurpose );
            for( BigInteger processingPurpose : processingPurposes ){
                processingConsentManagerTest.newPurposeR( consentDC, actors.processors[i], processingPurpose );
                processingConsentManagerTest.grantConsent(
                        purposesListDS.get( purposesListDS.size()-1 ), processingPurpose );
                processingConsentManagerTest.grantConsent(
                        purposesListDP.get( purposesListDP.size()-1 ), processingPurpose );
            }
        }

        //Revoke consent for all purposes SC with specific purpose
        System.out.println( "Revoking consent of purpose: " +
                CollectionConsentManagerTest.PURPOSE.values()[ revokingPurpose.intValue() ] );
        collectionConsentManagerTest.gasUsed = 0;
        collectionConsentManagerTest.revokeConsentPurpose( consentDS, revokingPurpose );
        csvWriter.append( "1SCProcessor,RevokeConsentPurpose," +
                consentDS.getAllProcessors().send().size() + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( consentDS.getAllProcessors().send().size() ) + "\n" );


        //Revoke consent for all purposes SC with specific purpose V2
        System.out.println( "DS Granting Consent on SC");
        for( ProcessingConsent purposeDS : purposesListDS ){
            processingConsentManagerTest.grantConsent( purposeDS, revokingPurpose );
        }
        System.out.println( "Revoking consent of purpose: " +
                CollectionConsentManagerTest.PURPOSE.values()[ revokingPurpose.intValue() ] );
        collectionConsentManagerTest.gasUsed = 0;
        for( ProcessingConsent purposeDS : purposesListDS ){
            processingConsentManagerTest.revokeConsent( purposeDS, revokingPurpose );
        }
        csvWriter.append( "1SCProcessor,RevokeConsentPurpose_locally," +
                purposesListDS.size() + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed/( purposesListDS.size() ) + "\n" );
    }


    public static void evaluateRevokeConsentProcessor() throws Exception {
        //Test Revoke Consent Purpose
        String purpose;
        ArrayList<ProcessingConsent> purposesListDS = new ArrayList<>();
        ArrayList<ProcessingConsent> purposesListP = new ArrayList<>();
        List<BigInteger> processingPurposes = new ArrayList<BigInteger>();
        processingPurposes.add(new BigInteger("1"));
        processingPurposes.add(new BigInteger("2"));
        processingPurposes.add(new BigInteger("3"));
        BigInteger revokingPurpose = new BigInteger("0");

        System.out.println("\nEVALUATING Revoke Processor");

        //New consent
        System.out.println("Creating new Consent SC");
        CollectionConsent consentDS = collectionConsentManagerTest.newCollectionConsentContract( actors.transactionManagerDataSubject, actors.controller, actors.dataRecipients);

        //DS grants consent
        System.out.println("Granting consent on SC");
        CollectionConsent consentDC = CollectionConsent.load(consentDS.getContractAddress(), web3j, actors.transactionManagerController, gasProvider);
        collectionConsentManagerTest.grantConsent( consentDC );

        //New Processing Consent and processing purposes for each Processor and DS grant consent
        System.out.println("New Purpose for each processor. Num Processors: " + actors.processors.length +
                "+ Adding " + processingPurposes.size() + " more Purposes for each processor.");
        for (int i = 0; i < actors.processors.length; i++) {
            purpose = processingConsentManagerTest.newPurposeR(consentDC, actors.processors[i], revokingPurpose);
            purposesListDS.add(ProcessingConsent.load(purpose, web3j, actors.transactionManagerDataSubject, gasProvider));
            purposesListP.add(ProcessingConsent.load(purpose, web3j, actors.transactionManagerProcessors[i], gasProvider));
            processingConsentManagerTest.grantConsent(purposesListDS.get(purposesListDS.size() - 1), revokingPurpose);
            processingConsentManagerTest.grantConsent(purposesListP.get(purposesListP.size() - 1), revokingPurpose);
            for (BigInteger processingPurpose : processingPurposes) {
                processingConsentManagerTest.newPurposeR(consentDC, actors.processors[i], processingPurpose);
                processingConsentManagerTest.grantConsent(
                        purposesListDS.get(purposesListDS.size() - 1), processingPurpose);
                processingConsentManagerTest.grantConsent(
                        purposesListP.get(purposesListP.size() - 1), processingPurpose);
            }
        }
        processingPurposes.add(new BigInteger("0"));


        int purposesProcessor = collectionConsentManagerTest.countAllPurposesProcessor( consentDS, actors.processors[0], actors.transactionManagerDataSubject );

        //Revoke consent for all processing consent SCs to a specific processor
        System.out.println("Revoking consent to a processor: " + actors.processors[0]);
        collectionConsentManagerTest.gasUsed = 0;
        collectionConsentManagerTest.revokeConsentProcessor(consentDS, actors.processors[0]);
        csvWriter.append("1SCProcessor,RevokeConsentProcessor," +
                purposesProcessor + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed / purposesProcessor + "\n");

        //Revoke consent for all purposes SC to a specific processor V2
        for (BigInteger processingPurpose : processingPurposes) {
            processingConsentManagerTest.grantConsent(purposesListDS.get(0), processingPurpose);
        }
        System.out.println("Revoking consent to a processor: " + actors.processors[0]);
        collectionConsentManagerTest.gasUsed = 0;
        TransactionReceipt receipt = purposesListDS.get(0).revokeAllConsents().send();
        csvWriter.append("1SCProcessor,RevokeConsentProcessor_PurposeSC," +
                purposesProcessor + "," +
                receipt.getGasUsed().intValue() + "," +
                receipt.getGasUsed().intValue() / purposesProcessor + "\n");

        //Revoke consent for all purposes SC to a specific processor V3
        for (BigInteger processingPurpose : processingPurposes) {
            processingConsentManagerTest.grantConsent(purposesListDS.get(0), processingPurpose);
        }
        System.out.println("Revoking consent to a processor: " + actors.processors[0]);
        collectionConsentManagerTest.gasUsed = 0;
        for (BigInteger processingPurpose : (List<BigInteger>) purposesListDS.get(0).getPurposes().send()) {
            processingConsentManagerTest.revokeConsent( purposesListDS.get(0), processingPurpose );
        }
        csvWriter.append("1SCProcessor,RevokeConsentProcessor_locally," +
                purposesProcessor + "," +
                collectionConsentManagerTest.gasUsed + "," +
                collectionConsentManagerTest.gasUsed / purposesProcessor + "\n");
    }

}
